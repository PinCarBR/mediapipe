# MediaPipe subgraph to calculate eyes landmarks for
# two eyes: left and right. (CPU input, and inference is executed on CPU.)
#
# EXAMPLE:
#   node {
#     calculator: "EyesDetectorLeftAndRightCpu"
#     input_stream: "IMAGE:image"
#     input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
#     input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
#     output_stream: "LEFT_EYE_IMAGE:left_eye_image"
#     output_stream: "RIGHT_EYE_IMAGE:right_eye_image"
#   }

type: "EyesDetectorLeftAndRightCpu"

# CPU image. (ImageFrame)
input_stream: "IMAGE:image"
# List of two landmarks defining LEFT eye boundaries - left and right corners.
# (NormalizedLandmarkList)
input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
# List of two landmarks defining RIGHT eye boundaries - left and right corners.
# (NormalizedLandmarkList)
input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"

# Region of interest used to do calculations for the left eye. (NormalizedRect)
output_stream: "LEFT_EYE_ROI:left_eye_roi"

# Region of interest used to do calculations for the right eye. (NormalizedRect)
output_stream: "RIGHT_EYE_ROI:right_eye_roi"

# 64x64 cropped eye image
output_stream: "LEFT_EYE_IMAGE_RGB:left_eye_image_rgb"

# 64x64 cropped eye image
output_stream: "RIGHT_EYE_IMAGE_RGB:right_eye_image_rgb"

# 64x64 cropped eye image (GRAY)
output_stream: "LEFT_EYE_IMAGE:left_eye_image"

# 64x64 cropped eye image (GRAY)
output_stream: "RIGHT_EYE_IMAGE:right_eye_image"

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:image"
  output_stream: "SIZE:image_size"
}

### Processing left eye ###

node {
  calculator: "EyesLandmarkLandmarksToRoi"
  input_stream: "LANDMARKS:left_eye_boundary_landmarks"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "ROI:left_eye_roi"
}

node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:left_eye_flag_side_packet"
  options {
    [mediapipe.ConstantSidePacketCalculatorOptions.ext] {
      packet { bool_value: false }
    }
  }
}

node {
  calculator: "SidePacketToStreamCalculator"
  input_stream: "TICK:image"
  input_side_packet: "left_eye_flag_side_packet"
  output_stream: "AT_TICK:left_eye_flag"
}

node {
  calculator: "EyesLandmarkCpu"
  input_stream: "IMAGE:image"
  input_stream: "ROI:left_eye_roi"
  input_stream: "IS_RIGHT_EYE:left_eye_flag"
  output_stream: "IMAGE:left_eye_image_rgb"
}

node {
  calculator: "ColorConvertCalculator"
  input_stream: "RGB_IN:left_eye_image_rgb"
  output_stream: "GRAY_OUT:left_eye_image"
}

### Processing right eye ###

node {
  calculator: "EyesLandmarkLandmarksToRoi"
  input_stream: "LANDMARKS:right_eye_boundary_landmarks"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "ROI:right_eye_roi"
}

node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:right_eye_flag_side_packet"
  options {
    [mediapipe.ConstantSidePacketCalculatorOptions.ext] {
      packet { bool_value: true }
    }
  }
}

node {
  calculator: "SidePacketToStreamCalculator"
  input_stream: "TICK:image"
  input_side_packet: "right_eye_flag_side_packet"
  output_stream: "AT_TICK:right_eye_flag"
}

node {
  calculator: "EyesLandmarkCpu"
  input_stream: "IMAGE:image"
  input_stream: "ROI:right_eye_roi"
  input_stream: "IS_RIGHT_EYE:right_eye_flag"
  output_stream: "IMAGE:right_eye_image_rgb"
}

node {
  calculator: "ColorConvertCalculator"
  input_stream: "RGB_IN:right_eye_image_rgb"
  output_stream: "GRAY_OUT:right_eye_image"
}